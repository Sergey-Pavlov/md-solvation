import numpy as np

class GromacsOutdata():

    def __init__(self):
        self.trajectory = None
        self.dict_mass = None
        self.system = None

    def read_trr(self, filename, with_pytrr=True):
        """
        Reads .trr file generated by Gromacs software
        returns Trajectory object
        """
        if with_pytrr:
            import pytrr
            coordinates = []
            box = []
            with pytrr.GroTrrReader(filename) as trajectory:
                for _ in trajectory:
                    frame_data = trajectory.get_data()
                    box.append(frame_data['box'])
                    coordinates.append(frame_data['x'])
            coordinates = np.array(coordinates)
            box = np.array(box)
            from mdsolv.core.structure import Trajectory
            self.trajectory = Trajectory(box, coordinates)

    def read_top(self, filename):
        """
        Reads .top file generated by Gromacs software
        returns dictionary with atom masses
        """
        with open(filename, 'r') as top:
            dict_mass = {}
            for line in top:
                if line == '[ atoms ]\n':
                    for line in top:
                        if ';' in line:
                            continue
                        elif line.isspace():
                            break
                        dict_mass.setdefault(line.split()[4].strip(), float(line.split()[7].strip()))
        self.dict_mass = dict_mass

    def read_gro(self, filename):
        """
        Reads .gro file generated by Gromacs software
        returns system - dictionary, where "key" is a molecule, item is a list of atoms belonged to this molecule
        """
        with open(filename, 'r') as gro:
            system = {} # Starting from Python 3.7, insertion order of Python dictionaries is guaranteed.
            gro.readline()
            gro.readline()
            for line in gro:
                try:
                    system[line[0:9].strip()].append(line[10:15].lstrip())
                except KeyError:
                    system.setdefault(line[0:9].strip(), [line[10:15].lstrip()])
            system.popitem() # The popitem() method removes the item that was last inserted into the dictionary.
                            # In versions before 3.7, the popitem() method removes a random item.
        self.system = system

    def read_gro_file(self, filename, get_coordinates=False):
        """
        This function reads .gro input Gromacs file in order to put into correspondance atoms index and atom_types, molecules and weights
        indexes - array with corrspondance between atoms_index and molecele_index (for example: indexes[i] gives list of atoms_index of i-th molecule)
        atomlist[i] gives name of i-th atom
        mollist[i] gives name of i-th molecule
        Units of coordinates are Angstroms
        """
        with open(filename) as inf:
            line_number = 0
            molecule_index_pr = -1
            indexes = []
            atomlist = []
            mollist = []
            atoms_in_one_molecule = []
            if get_coordinates:
                coordinates = []
            for line in inf:
                line_number += 1
                if len(line) > 40:
                    atom_index = int(line[15:20]) - 1
                    molecule_index = int(line[0:5]) - 1
                    atomname = line[12:15].strip()
                    moleculename = line[5:12].strip()
                    if get_coordinates:
                        coordinate = list(map(float, line[20:].strip().split()))
                        coordinates.append(np.array(coordinate) * 10)
                    if molecule_index_pr == -1:
                        mollist.append(moleculename)
                        molecule_index_pr = molecule_index
                    if molecule_index == molecule_index_pr:
                        atoms_in_one_molecule.append(atom_index)
                    else:
                        indexes.append(atoms_in_one_molecule)
                        atoms_in_one_molecule = []
                        atoms_in_one_molecule.append(atom_index)
                        molecule_index_pr = molecule_index
                        mollist.append(moleculename)
                    atomlist.append(atomname)
            indexes.append(np.array(atoms_in_one_molecule))
            from mdsolv.core.structure import System
            if get_coordinates:
                box_data = list(map(float, line.strip().split()))
                if len(box_data) == 3:
                    box = np.array([[box_data[0] * 10, 0, 0],
                                    [0, box_data[1] * 10, 0],
                                    [0, 0, box_data[2] * 10]])
                else:
                    raise ValueError('Cannot process non-orthorhombic boxes')
                self.system = System(atomlist, mollist, indexes, box, np.array(coordinates))
            else:
                self.system = System(atomlist, mollist, indexes)

    @staticmethod
    def read_mdlog(filepath):
        """
        This class is for parsing md.log files generated by Gromacs software
        """
        from monty.re import regrep
        with open(filepath) as f:
            data = f.readlines()
        patterns = {
            'step': '\s+Step\s+',
            'energy': 'Energies'
        }
        matches = regrep(filepath, patterns)
        steps = []
        energies = {'bond': [],
                    'angle': [],
                    'dihedral': [],
                    'lj': [],
                    'coulomb': [],
                    'coulomb_recip': [],
                    'potential': [],
                    'kinetic': [],
                    'total': [],
                    'conserved': []}
        temperature = []
        pressure = []
        for i in matches['step']:
            steps.append(int(data[i[1] + 1].split()[0]))
        for i in matches['energy'][:len(matches['step'])]:
            energies['bond'].append(float(data[i[1] + 2].split()[0]))
            energies['angle'].append(float(data[i[1] + 2].split()[1]))
            energies['dihedral'].append(float(data[i[1] + 2].split()[2]))
            energies['lj'].append(float(data[i[1] + 2].split()[3]))
            energies['coulomb'].append(float(data[i[1] + 2].split()[4]))
            energies['coulomb_recip'].append(float(data[i[1] + 4].split()[0]))
            energies['potential'].append(float(data[i[1] + 4].split()[1]))
            if matches['energy'][1][1] - matches['energy'][0][1] == 11:
                energies['kinetic'].append(float(data[i[1] + 4].split()[2]))
                energies['total'].append(float(data[i[1] + 4].split()[3]))
                energies['conserved'].append(float(data[i[1] + 4].split()[4]))
                temperature.append(float(data[i[1] + 6].split()[0]))
                pressure.append(float(data[i[1] + 6].split()[1]))
        steps = np.array(steps)
        temperature = np.array(temperature)
        pressure = np.array(pressure)
        for key in energies.keys():
            energies[key] = np.array(energies[key])
        return steps, energies, temperature, pressure