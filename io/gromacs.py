import numpy as np
from ..core.structure import Trajectory

class GromacsOutdata():

    def __init__(self):
        self.trajectory = None
        self.dict_mass = None
        self.system = None

    def read_trr(self, filename, with_pytrr=True):
        """
        Reads .trr file generated by Gromacs software
        returns Trajectory object
        """
        if with_pytrr:
            import pytrr
            coordinates = []
            box = []
            with pytrr.GroTrrReader(filename) as trajectory:
                for _ in trajectory:
                    frame_data = trajectory.get_data()
                    box.append(frame_data['box'])
                    coordinates.append(frame_data['x'])
            coordinates = np.array(coordinates)
            box = np.array(box)
            self.trajectory = Trajectory(box, coordinates)

    def read_top(self, filename):
        """
        Reads .top file generated by Gromacs software
        returns dictionary with atom masses
        """
        with open(filename, 'r') as top:
            dict_mass = {}
            for line in top:
                if line == '[ atoms ]\n':
                    for line in top:
                        if ';' in line:
                            continue
                        elif line.isspace():
                            break
                        dict_mass.setdefault(line.split()[4].strip(), float(line.split()[7].strip()))
        self.dict_mass = dict_mass

    def read_gro(self, filename):
        """
        Reads .gro file generated by Gromacs software
        returns system - dictionary, where "key" is a molecule, item is a list of atoms belonged to this molecule
        """
        with open(filename, 'r') as gro:
            system = {} # Starting from Python 3.7, insertion order of Python dictionaries is guaranteed.
            gro.readline()
            gro.readline()
            for line in gro:
                try:
                    system[line[0:9].strip()].append(line[10:15].lstrip())
                except KeyError:
                    system.setdefault(line[0:9].strip(), [line[10:15].lstrip()])
            system.popitem() # The popitem() method removes the item that was last inserted into the dictionary.
                            # In versions before 3.7, the popitem() method removes a random item.
        self.system = system

    def read_gro_file(self,filename):
        """
        This function reads .gro input Gromacs file in order to put into correspondance atoms index and atom_types, molecules and weights
        indexes - array with corrspondance between atoms_index and molecele_index (for example: indexes[i] gives list of atoms_index of i-th molecule)
        atom_names[i] gives name of i-th atom
        molecule_names[i] gives name of i-th molecule
        """
        with open(filename) as inf:
            line_number = 0
            molecule_index_pr = -1
            indexes = []
            atom_names = []
            molecule_names = []
            atoms_in_one_molecule = []
            for line in inf:
                line_number += 1
                if len(line) > 40:
                    atom_index = int(line[15:20]) - 1
                    molecule_index = int(line[0:5]) - 1
                    atomname = line[12:15].strip()
                    moleculename = line[5:12].strip()
                    if molecule_index_pr == -1:
                        molecule_names.append(moleculename)
                        molecule_index_pr = molecule_index
                    if molecule_index == molecule_index_pr:
                        atoms_in_one_molecule.append(atom_index)
                    else:
                        indexes.append(atoms_in_one_molecule)
                        atoms_in_one_molecule = []
                        atoms_in_one_molecule.append(atom_index)
                        molecule_index_pr = molecule_index
                        molecule_names.append(moleculename)
                    atom_names.append(atomname)
            indexes.append(atoms_in_one_molecule)
            self.indexes = indexes
            self.atom_names = atom_names
            self.molecule_names = molecule_names

    def read_mdlog(self):
        """
        This class is for parsing md.log files generated by Gromacs software
        """
        pass
